{"ast":null,"code":"// server/routes/admin.js (or adminAuthRoute.js)\n\nconst express = require(\"express\");\nconst bcrypt = require(\"bcryptjs\");\nconst router = express.Router();\nconst mongoose = require(\"mongoose\");\nconst AdminSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  password: String,\n  // store hashed password\n  role: {\n    type: String,\n    default: \"admin\"\n  }\n});\nconst Admin = mongoose.model(\"Admin\", AdminSchema);\n\n// Admin Registration\nrouter.post(\"/register\", async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  try {\n    const existingAdmin = await Admin.findOne({\n      email\n    });\n    if (existingAdmin) return res.status(400).json({\n      message: \"Admin already exists\"\n    });\n    const newAdmin = new Admin({\n      name,\n      email,\n      password: hashedPassword\n    });\n    await newAdmin.save();\n    res.status(201).json({\n      message: \"Admin registered successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: \"Registration failed\",\n      error\n    });\n  }\n});\n\n// Admin Login\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const admin = await Admin.findOne({\n      email\n    });\n    if (!admin) return res.status(404).json({\n      message: \"Admin not found\"\n    });\n    const isMatch = await bcrypt.compare(password, admin.password);\n    if (!isMatch) return res.status(400).json({\n      message: \"Invalid credentials\"\n    });\n    res.status(200).json({\n      message: \"Login successful\",\n      admin\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: \"Login failed\",\n      error\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","router","Router","mongoose","AdminSchema","Schema","name","String","email","password","role","type","default","Admin","model","post","req","res","body","hashedPassword","hash","existingAdmin","findOne","status","json","message","newAdmin","save","error","admin","isMatch","compare","module","exports"],"sources":["D:/website E-commerce/client/src/Pages/adminauth.jsx"],"sourcesContent":["// server/routes/admin.js (or adminAuthRoute.js)\r\n\r\nconst express = require(\"express\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst router = express.Router();\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst AdminSchema = new mongoose.Schema({\r\n  name: String,\r\n  email: String,\r\n  password: String, // store hashed password\r\n  role: { type: String, default: \"admin\" }\r\n});\r\n\r\nconst Admin = mongoose.model(\"Admin\", AdminSchema);\r\n\r\n// Admin Registration\r\nrouter.post(\"/register\", async (req, res) => {\r\n  const { name, email, password } = req.body;\r\n  const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n  try {\r\n    const existingAdmin = await Admin.findOne({ email });\r\n    if (existingAdmin) return res.status(400).json({ message: \"Admin already exists\" });\r\n\r\n    const newAdmin = new Admin({ name, email, password: hashedPassword });\r\n    await newAdmin.save();\r\n    res.status(201).json({ message: \"Admin registered successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Registration failed\", error });\r\n  }\r\n});\r\n\r\n// Admin Login\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const admin = await Admin.findOne({ email });\r\n    if (!admin) return res.status(404).json({ message: \"Admin not found\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, admin.password);\r\n    if (!isMatch) return res.status(400).json({ message: \"Invalid credentials\" });\r\n\r\n    res.status(200).json({ message: \"Login successful\", admin });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Login failed\", error });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}